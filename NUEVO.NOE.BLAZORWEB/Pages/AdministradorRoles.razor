 @page "/AdministradorRoles";
@using NUEVO.NOE.BLAZORWEB.ClientServices.Implementacion
@inject IRolesClientService rolesClientService
@inject ISnackbar snackbar
@inject IDialogService dialogService 
@inject NavigationManager navigation
@inject RolNotificationService rolNotificationService

<MudCard Class="m-3">
    <MudCardHeader>
        Bienvenido a la pagina de administracion de roles
    </MudCardHeader>
    <MudCardContent>
        <MudText>
            Solo Los usuarios con roles de soporte o sistemas pueden ver esta pagina
        </MudText>
    </MudCardContent>
</MudCard>

<div class="m-3">
    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled"
               Color="Color.Primary" Class="ml-auto" OnClick="AgregarRol">Agregar Rol</MudButton>
</div>

<div class="mx-5 mb-3">
    <MudTable Items="filteredRoles" Dense="true" Hover="true" Bordered="false" Striped="true">
        <ToolBarContent>
            <MudText>Roles</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Buscar por nombre o departamento" Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0" Immediate="true"></MudTextField>
        </ToolBarContent>
       <HeaderContent>
           <MudTh>ROL</MudTh>
           <MudTh>DEPARTAMENTO</MudTh>
            <MudTh>INHABILITADO</MudTh>
           <MudTh>ACCIONES</MudTh>
       </HeaderContent>
       <RowTemplate>
           <MudTd>@context.Descripcion</MudTd>
           <MudTd>@context.Departamento.AcronimoDescripcion</MudTd>
           <MudTd>@context.Inhabilitado</MudTd>
            <MudTd>
                
            
                <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(() => EditarRol(context.Id))">Editar</MudButton>
                <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled" Color="Color.Tertiary" Class="ml-auto" OnClick="@(() => FuncionesByRol(context.Id))">Funciones</MudButton>
            </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
    </MudTable>
</div>

@code {
    List<RolDTO> roles = new();

    //bindeado en el input de busqueda
    private string searchString = "";

    //logica busqueda filtro
    private List<RolDTO> filteredRoles => roles.Where(_ => _.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                                       _.Departamento.Descripcion.Contains(searchString,StringComparison.OrdinalIgnoreCase) ).ToList();






    protected async override Task OnInitializedAsync()
    {
        //Evento OnUsuarioUpdated
        //cada vez que se dispare el evento OnRolUpdated, automáticamente se ejecutará el método CargarUsuarios para resfrescar la tabla
        //El evento se dispara cuando se hace update o insert de la pagina DetailsUsuario
        rolNotificationService.OnRolUpdated += async () => await CargarRoles();
        await CargarRoles();
    }

    private async Task CargarRoles()
    {
        var respuestaRoles = await rolesClientService.GetRoles(); 
        if (respuestaRoles.IsSuccess)
        {
            roles = respuestaRoles.Data;
        }
    }

    public void Dispose()
    {
        rolNotificationService.OnRolUpdated -= async () => await CargarRoles();
    }
    private async void AgregarRol()

    {   
        // navigation.NavigateTo($"DetailsRol");
        var dialog = dialogService.Show<DetailsRol>("Agregar Rol", new DialogParameters
        {
              //para que se actualice la pagina cuando se agregue un rol
            { "OnRolUpdated", EventCallback.Factory.Create(this, async () => await CargarRoles()) }
        });
    }

    
 


    private async void EditarRol(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("id", id);
        //para que se actualice la pagina cuando se edita el rol
        parameters.Add("OnRolUpdated", EventCallback.Factory.Create(this, async () => await CargarRoles()));

        dialogService.Show<DetailsRol>("Editar Rol", parameters); 

}


    private async void FuncionesByRol(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("id", id);
      
        dialogService.Show<FuncionesRol>("Funciones Por Rol", parameters);

    }

}